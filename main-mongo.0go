package main

// ตัวอย่างการใช้ mongo-go-driver
// https://github.com/simagix/mongo-go-examples
import (
	"context"
	"encoding/json"
	"fmt"
	"log"

	// "time"
	// "os"
	//  ทำให้ใช้ Aggregate แบบ string ได้
	"github.com/simagix/keyhole/mdb"
	// "go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Trainer You will be using this Trainer type later in the program
type Trainer struct {
	Name string
	Age  int
	City string
}

func main() {
	// fmt.Println(3333)
	// ctx, _ := context.WithTimeout(context.Background(), 30 * time.Second)
	// client, err := mongo.Connect(ctx, options.Client().ApplyURI())
	// scig
	mongoURI := "mongodb+srv://test2018admin:test2018admin@cluster0-zggoy.mongodb.net"
	database := "scig"
	// collection := "downloads"

	// Set client options
	clientOptions := options.Client().ApplyURI(mongoURI)

	// Connect to MongoDB
	client, err := mongo.Connect(context.TODO(), clientOptions)

	if err != nil {
		log.Fatal(err)
	}

	// Check the connection
	err = client.Ping(context.TODO(), nil)

	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Connected to MongoDB!")
	collection := client.Database(database).Collection("trainers")

	// // Some dummy data to add to the Database
	// ash := Trainer{"Ash", 10, "Pallet Town"}
	// misty := Trainer{"Misty", 10, "Cerulean City"}
	// brock := Trainer{"Brock", 15, "Pewter City"}

	// // Insert a single document
	// insertResult, err := collection.InsertOne(context.TODO(), ash)
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// fmt.Println("Inserted a single document: ", insertResult.InsertedID)

	// // Insert multiple documents
	// trainers := []interface{}{misty, brock}

	// insertManyResult, err := collection.InsertMany(context.TODO(), trainers)
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// fmt.Println("Inserted multiple documents: ", insertManyResult.InsertedIDs)

	// // end insert

	// // Update a document
	// filter := bson.D{{"name", "Ash"}}

	// update := bson.D{
	// 	{"$inc", bson.D{
	// 		{"age", 1},
	// 	}},
	// }

	// updateResult, err := collection.UpdateOne(context.TODO(), filter, update)
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// fmt.Printf("Matched %v documents and updated %v documents.\n", updateResult.MatchedCount, updateResult.ModifiedCount)

	// Find a single document
	// var result Trainer

	// err = collection.FindOne(context.TODO(), filter).Decode(&result)
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// fmt.Printf("Found a single document: %+v\n", result)

	// findOptions := options.Find()
	// findOptions.SetLimit(2)

	var results []*Trainer

	// Finding multiple documents returns a cursor
	// cur, err := collection.Find(context.TODO(), bson.D{{}}, findOptions)
	// if err != nil {
	// 	log.Fatal(err)
	// }
	fmt.Println("dd:==================================================")
	var ctx = context.Background()
	fmt.Println("1:==================================================")
	match := `[{
		"$match": {
			"name" : "Ash"
		}
	  }]`
	fmt.Println("2:==================================================")
	opts := options.Aggregate()
	fmt.Println("3:==================================================")
	cur, err := collection.Aggregate(
		// context.Background(),
		ctx,
		mdb.MongoPipeline(match),
		opts,
	)
	fmt.Println("4:==================================================")
	if err != nil {
		fmt.Println("4.5:==================================================")
		log.Fatal(err)
	}
	fmt.Println("cur: \n", cur)
	fmt.Println("cur:==================================================")
	// Iterate through the cursor
	for cur.Next(ctx) {
		var elem Trainer
		err := cur.Decode(&elem)
		if err != nil {
			log.Fatal(err)
		}
		// fmt.Println("&elem =", &elem)
		results = append(results, &elem)
	}

	if err := cur.Err(); err != nil {
		log.Fatal(err)
	}

	// Close the cursor once finished
	cur.Close(ctx)
	// for i := 0; i < len(results); i++ {
	// 	fmt.Println("&elem =",results[i])
	// }
	//  While loop
	// i := 0
	// for i < len(results){
	// 	fmt.Println("&elem =",results[i])
	// 	i++
	// }
	// end While loop
	// For-each range loop
	for i, s := range results {
		fmt.Println(i, s)
	}
	// end For-each range loop
	// https://yourbasic.org/golang/for-loop/
	// https://yourbasic.org/golang/for-loop-range-array-slice-map-channel/
	fmt.Println("Found multiple documents (array of pointers): =", results)
	// https://stackoverflow.com/questions/24489384/golang-how-to-print-the-values-of-arrays
	b, _ := json.Marshal(results)
	// var m Message
	json.Unmarshal(b, &results)
	fmt.Printf("Found = %q\n", b)
	// ผลการทำงานของ %+q
	// Found = [%!q(*main.Trainer=&{Ash +13 Pallet Town}) %!q(*main.Trainer=&{Misty +10 Cerulean City})
	// %!q(*main.Trainer=&{Brock +15 Pewter City}) %!q(*main.Trainer=&{Ash +10 Pallet Town})
	// %!q(*main.Trainer=&{Misty +10 Cerulean City}) %!q(*main.Trainer=&{Brock +15 Pewter City})
	// %!q(*main.Trainer=&{Ash +10 Pallet Town}) %!q(*main.Trainer=&{Misty +10 Cerulean City})
	// %!q(*main.Trainer=&{Brock +15 Pewter City})]
	// dataaa := bson.Unmarshal

	// Delete all the documents in the collection
	// deleteResult, err := collection.DeleteMany(context.TODO(), bson.D{{}})
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// fmt.Printf("Deleted %v documents in the trainers collection\n", deleteResult.DeletedCount)

	// Close the connection once no longer needed
	err = client.Disconnect(context.TODO())

	if err != nil {
		log.Fatal(err)
	} else {
		fmt.Println("Connection to MongoDB closed.")
	}

}
